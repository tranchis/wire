package org.iids.aos.agents.monitor;

import org.iids.aos.agent.Agent;
import org.iids.aos.systemservices.communicator.structs.AgentHandle;
import org.iids.aos.systemservices.communicator.structs.AgentScapeID;
import org.iids.aos.messagecenter.Envelope;

import org.iids.aos.exception.AgentScapeException;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.*;

import java.io.Serializable;
import java.util.Map;
import java.util.Hashtable;
import java.util.Vector;

import net.sf.ictalive.eventbus.EventBus;
import alive.EventModel.Fact.SendAct;
import alive.EventModel.Event.Actor;
import alive.EventModel.Event.EventFactory;
import alive.EventModel.Event.Event;
import alive.EventModel.Fact.FactFactory;
import org.eclipse.emf.ecore.EObject;
import alive.EventModel.Fact.Content;
import opera.OM.Atom;
import opera.OM.OMFactory;
import alive.EventModel.Fact.Message;
import alive.EventModel.Fact.Fact;
import net.sf.ictalive.eventbus.exception.EventBusConnectionException;

/**
 * Monitorized Chatting Agent. Just connect two agents and send messages between
 * them. This message interchange is reflected on monitor
 * 
 * @author igomez
 */
public class MonitorListener extends Agent {
    public class NewJFrame extends javax.swing.JFrame {

	/** Creates new form NewJFrame */
	public NewJFrame() {
	    initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

	    jButtonListen = new javax.swing.JButton();
	    jButtonKill = new javax.swing.JButton();
	    jLabel1 = new javax.swing.JLabel();
	    jLabel2 = new javax.swing.JLabel();
	    jTextFieldURL = new javax.swing.JTextField();
	    jScrollPane1 = new javax.swing.JScrollPane();
	    jTextAreaListened = new javax.swing.JTextArea();

	    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	    jButtonListen.setText("Listen");
	    jTextFieldURL.setText("localhost");
	    jButtonListen
		    .addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(
				java.awt.event.ActionEvent evt) {
			    jButtonListenActionPerformed(evt);
			}
		    });

	    jButtonKill.setText("Kill");
	    jButtonKill.addActionListener(new java.awt.event.ActionListener() {
		public void actionPerformed(java.awt.event.ActionEvent evt) {
		    jButtonKillActionPerformed(evt);
		}
	    });

	    jLabel1.setText("Event-bus URL");

	    jLabel2.setText("Captured events");

	    jTextAreaListened.setColumns(20);
	    jTextAreaListened.setRows(5);
	    jScrollPane1.setViewportView(jTextAreaListened);

	    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
		    getContentPane());
	    getContentPane().setLayout(layout);
	    layout.setHorizontalGroup(layout
		    .createParallelGroup(
			    javax.swing.GroupLayout.Alignment.LEADING)
		    .addGroup(
			    layout.createSequentialGroup()
				    .addContainerGap()
				    .addGroup(
					    layout.createParallelGroup(
						    javax.swing.GroupLayout.Alignment.LEADING)
						    .addComponent(
							    jScrollPane1,
							    javax.swing.GroupLayout.DEFAULT_SIZE,
							    376,
							    Short.MAX_VALUE)
						    .addGroup(
							    layout.createSequentialGroup()
								    .addComponent(
									    jButtonListen)
								    .addPreferredGap(
									    javax.swing.LayoutStyle.ComponentPlacement.RELATED,
									    264,
									    Short.MAX_VALUE)
								    .addComponent(
									    jButtonKill,
									    javax.swing.GroupLayout.PREFERRED_SIZE,
									    62,
									    javax.swing.GroupLayout.PREFERRED_SIZE))
						    .addGroup(
							    layout.createSequentialGroup()
								    .addComponent(
									    jLabel1)
								    .addPreferredGap(
									    javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								    .addComponent(
									    jTextFieldURL,
									    javax.swing.GroupLayout.DEFAULT_SIZE,
									    271,
									    Short.MAX_VALUE))
						    .addComponent(jLabel2))
				    .addContainerGap()));
	    layout.setVerticalGroup(layout
		    .createParallelGroup(
			    javax.swing.GroupLayout.Alignment.LEADING)
		    .addGroup(
			    javax.swing.GroupLayout.Alignment.TRAILING,
			    layout.createSequentialGroup()
				    .addContainerGap()
				    .addGroup(
					    layout.createParallelGroup(
						    javax.swing.GroupLayout.Alignment.BASELINE)
						    .addComponent(jLabel1)
						    .addComponent(
							    jTextFieldURL,
							    javax.swing.GroupLayout.PREFERRED_SIZE,
							    javax.swing.GroupLayout.DEFAULT_SIZE,
							    javax.swing.GroupLayout.PREFERRED_SIZE))
				    .addPreferredGap(
					    javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				    .addComponent(jLabel2)
				    .addPreferredGap(
					    javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				    .addComponent(
					    jScrollPane1,
					    javax.swing.GroupLayout.DEFAULT_SIZE,
					    179, Short.MAX_VALUE)
				    .addPreferredGap(
					    javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				    .addGroup(
					    layout.createParallelGroup(
						    javax.swing.GroupLayout.Alignment.BASELINE)
						    .addComponent(jButtonListen)
						    .addComponent(jButtonKill))
				    .addContainerGap()));

	    pack();
	}// </editor-fold>

	// Variables declaration - do not modify
	private javax.swing.JButton jButtonKill;
	private javax.swing.JButton jButtonListen;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea jTextAreaListened;
	private javax.swing.JTextField jTextFieldURL;

	// End of variables declaration

	private void jButtonKillActionPerformed(java.awt.event.ActionEvent evt) {
	    shutdown();
	}

    }

    private NewJFrame frame;
    private EventBus eb = null;

    protected void jButtonListenActionPerformed(java.awt.event.ActionEvent evt) {
	if (this.eb == null) {
	    initMonitor();
	}
	listenMonitor();

    }

    private void initMonitor() {
	try {
	    this.eb = new EventBus(this.frame.jTextFieldURL.getText());
	} catch (EventBusConnectionException EE) {
	    this.frame.jTextAreaListened.append("EventBusConnectionException:'"
		    + EE.getMessage() + "'");
	}
	this.frame.jTextAreaListened.setText("");
	this.frame.jTextAreaListened.setText("·Listening from:'"
		+ this.frame.jTextFieldURL.getText() + "'\n");

    }

    private void listenMonitor() {

	Event resultEvent = eb.takeNow();
	if (resultEvent != null)

	{
	    SendAct dummyFact;
	    Content dummyContent;
	    Message dummyMess;
	    Atom dummyAtom;

	    dummyContent = resultEvent.getContent();
	    dummyFact = (SendAct) dummyContent.getFact();
	    dummyMess = dummyFact.getSendMessage();
	    java.util.Iterator it = dummyMess.getObject().iterator();
	    String final_text = "";
	    while (it.hasNext()) {
		dummyAtom = (Atom) it.next();
		final_text = final_text + "|" + dummyAtom.getProposition();
	    }

	    this.frame.jTextAreaListened.append("·" + final_text + "\n");
	}
    }

    private void shutdown() {
	// invoke in a non-awt thread in case of errors..

	try {
	    kill();
	    frame.setVisible(false);
	    frame.dispose();
	    frame = null;
	} catch (AgentScapeException ex) {
	    log.error("Problem killing self", ex);
	}

    }

    @Override
    public void run() {

	// enactServiceChain();
	// wait for agent to close..
	this.frame = new NewJFrame();
	this.frame.setVisible(true);
	waitForCompletion();
    }

    @Override
    protected void cleanUp() {
    }

}
